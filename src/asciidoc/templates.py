from jinja2 import Template

# pylint: disable=line-too-long
requirement_template = Template(
    """// Do not edit this file directly. This file is generated from the contents of {{ req.validator.url }}
[#{{ local_name }}]
====== {{ req.label }}

[frame=none, cols="1,5"]
|===
|Property | Value

|Identifier | `{{ req.iri }}`
|Label | {{ req.label }}
|Definition | {{ req.definition }}
|Comment | {{ req.comment }}
{% if req.status == "http://purl.org/linked-data/registry#statusSubmitted" %}include::{{ parents_dir }}/statuses/submitted.adoc[]{% elif req.status == "http://purl.org/linked-data/registry#statusStable" %}include::{{ parents_dir }}/statuses/stable.adoc[]{% else %}include::{{ parents_dir }}/statuses/invalid.adoc[]{% endif %}
|Conformance Classes | {{ req.conformance_classes }}
{% if controlled_list %}
|Property | Value
|Controlled list items | The result value MUST be from the following list: 
{% for item in controlled_list %}
link:{{ item[0] }}[`{{ item[1] }}`] 
{% endfor %}
{% endif %}
|Source | {{ req.source }}
|Validators | link:{{ req.validator.url }}[`{{ req.validator.label }}`]
|Examples | Valid: link:{{ req.examples.valid_url }}[`{{ req.examples.valid_label }}`]

Invalid: link:{{ req.examples.invalid_url }}[`{{ req.examples.invalid_label }}`]
|===

"""
)

index_requirement_template = Template(
    """// Do not edit this file directly.
===== {{ title }}
{% for file in files %}
include::{{ file }}[]
{% endfor %}
"""
)

requirements_sections_template = Template(
    """// Do not edit this file directly.
{% for section in sections %}
include::../{{ section }}[]
{% endfor %}
"""
)
